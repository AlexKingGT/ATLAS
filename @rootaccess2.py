#@rootaccess2 —Å–∞–±–∞–π—Å—è

import logging
import asyncio
import base64
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup

TOKEN = input("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: ")
ADMIN_ID = int(input("–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: "))
CHANNEL_LINK = input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª: ")
PRICE_INFO = input("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–π—Å (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ —Å—Ç—Ä–æ–∫—É): ")
WELCOME_TEXT = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
PHOTO_ID = None

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

USER_FILE = "users.txt"
DATA_FILE = "data.txt"
PRICE_FILE = "price.txt"

logging.basicConfig(level=logging.INFO)


class AdminState(StatesGroup):
    waiting_for_photo = State()
    waiting_for_text = State()
    waiting_for_broadcast = State()
    waiting_for_username = State()
    waiting_for_check_def = State()
    waiting_for_price = State()

def add_user(username):
    with open(USER_FILE, "a", encoding="utf-8") as file:
        file.write(username + "\n")

def save_user(user_id):
    users = get_all_bot_users()
    if str(user_id) not in users:
        with open(DATA_FILE, "a", encoding="utf-8") as file:
            file.write(str(user_id) + "\n")

def get_all_users():
    try:
        with open(USER_FILE, "r", encoding="utf-8") as file:
            return [line.strip() for line in file.readlines()]
    except FileNotFoundError:
        return []

def get_all_bot_users():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as file:
            return [line.strip() for line in file.readlines()]
    except FileNotFoundError:
        return []

#@rootaccess2 —Å–∞–±–∞–π—Å—è

def get_price():
    try:
        with open(PRICE_FILE, "r", encoding="utf-8") as file:
            return file.read().strip()
    except FileNotFoundError:
        return "–ü—Ä–∞–π—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

def save_price(new_price):
    with open(PRICE_FILE, "w", encoding="utf-8") as file:
        file.write(new_price)

def check_def(username):
    users = get_all_users()
    return username in users

keyboard = InlineKeyboardMarkup().add(
    InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ DEF", callback_data="check_def"),
    InlineKeyboardButton("–ü—Ä–∞–π—Å", callback_data="price"),
    InlineKeyboardButton("–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK),
    InlineKeyboardButton("–°–æ–∑–¥–∞—Ç–µ–ª—å", callback_data="creator")
)

admin_keyboard = InlineKeyboardMarkup().add(
    InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è", callback_data="set_text"),
    InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="set_photo"),
    InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="add_user"),
    InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="broadcast"),
    InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–π—Å", callback_data="set_price")
)

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    save_user(message.from_user.id)
    if PHOTO_ID:
        await message.answer_photo(PHOTO_ID, caption=WELCOME_TEXT, reply_markup=keyboard)
    else:
        await message.answer(WELCOME_TEXT, reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "check_def")
async def ask_for_def_username(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ @username –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    await AdminState.waiting_for_check_def.set()

@dp.message_handler(state=AdminState.waiting_for_check_def)
async def handle_check_def(message: types.Message, state: FSMContext):
    username = message.text.strip()
    if not username.startswith("@"):
        await message.reply("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ username –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username")
        return
    username = username[1:]
    if check_def(username):

#@rootaccess2 —Å–∞–±–∞–π—Å—è

        report = f"‚úÖ @{username} –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
    else:
        report = f"‚ùå @{username} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
    await message.reply(report)
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == "price")
async def send_price(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    current_price = get_price()
    await bot.send_message(callback_query.from_user.id, f"üìã –ü—Ä–∞–π—Å:\n{current_price}")

_creator_enc = b'QHJvb3RhY2Nlc3My'
CREATOR = base64.b64decode(_creator_enc).decode('utf-8')

@dp.callback_query_handler(lambda c: c.data == "creator")
async def send_creator_info(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {CREATOR}")

@dp.message_handler(commands=["admin"])
async def admin_panel(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    await message.reply("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=admin_keyboard)

@dp.callback_query_handler(lambda c: c.data == "set_text")
async def set_text(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        return
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:")
    await AdminState.waiting_for_text.set()

@dp.message_handler(state=AdminState.waiting_for_text)
async def process_new_text(message: types.Message, state: FSMContext):
    global WELCOME_TEXT
    new_text = message.text.strip()
    WELCOME_TEXT = new_text
    await message.reply("–¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == "set_photo")
async def set_photo(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        return

#@rootaccess2 —Å–∞–±–∞–π—Å—è

    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:")
    await AdminState.waiting_for_photo.set()

@dp.message_handler(content_types=['photo'], state=AdminState.waiting_for_photo)
async def process_new_photo(message: types.Message, state: FSMContext):
    global PHOTO_ID
    PHOTO_ID = message.photo[-1].file_id
    await message.reply("–§–æ—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == "add_user")
async def admin_add_user(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        return
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
    await AdminState.waiting_for_username.set()

@dp.message_handler(state=AdminState.waiting_for_username)
async def process_new_user(message: types.Message, state: FSMContext):
    username = message.text.strip()
    if not username.startswith("@"):
        await message.reply("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ username –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username")
        return
    username = username[1:]
    add_user(username)
    await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É!")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == "broadcast")
async def broadcast(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        return
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
    await AdminState.waiting_for_broadcast.set()

@dp.message_handler(state=AdminState.waiting_for_broadcast)
async def send_broadcast(message: types.Message, state: FSMContext):
    text = message.text.strip()
    users = get_all_bot_users()
    failed_users = []  # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ

    for user in users:
        try:
            await bot.send_message(user, text)
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}: {e}")
            failed_users.append(user)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö

    if failed_users:
        failed_message = f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {', '.join(failed_users)}"
        await message.reply(failed_message)

    await message.reply("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    await state.finish()

#@rootaccess2 —Å–∞–±–∞–π—Å—è

@dp.callback_query_handler(lambda c: c.data == "set_price")
async def set_price(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        return
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∞–π—Å:")
    await AdminState.waiting_for_price.set()

@dp.message_handler(state=AdminState.waiting_for_price)
async def process_new_price(message: types.Message, state: FSMContext):
    new_price = message.text.strip()
    save_price(new_price)
    await message.reply("–ü—Ä–∞–π—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await state.finish()

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)

#@rootaccess2 —Å–∞–±–∞–π—Å—è
